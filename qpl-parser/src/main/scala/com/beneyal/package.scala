import com.beneyal.parse.{ColumnType, SqlSchema}

import ColumnType.*

def concertSinger: SqlSchema =
  SqlSchema(
    dbId = "concert_singer",
    tableNames = Vector("stadium", "singer", "concert", "singer_in_concert"),
    columnNames = Vector(
      "Stadium_ID",
      "Location",
      "Name",
      "Capacity",
      "Highest",
      "Lowest",
      "Average",
      "Singer_ID",
      "Name",
      "Country",
      "Song_Name",
      "Song_release_year",
      "Age",
      "Is_male",
      "concert_ID",
      "concert_Name",
      "Theme",
      "Stadium_ID",
      "Year",
      "concert_ID",
      "Singer_ID"
    ),
    columnTypes = Vector(
      Number,
      Text,
      Text,
      Number,
      Number,
      Number,
      Number,
      Number,
      Text,
      Text,
      Text,
      Text,
      Number,
      Others,
      Number,
      Text,
      Text,
      Number, // Originally `Text`
      Number, // Originally `Text`
      Number,
      Number // Originally `Text`
    ),
    columnToTable = Vector(0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3),
    tableToColumns = Map(
      "stadium"           -> (0 to 6).toVector,
      "singer"            -> (7 to 13).toVector,
      "concert"           -> (14 to 18).toVector,
      "singer_in_concert" -> Vector(19, 20)
    ),
    foreignKeys = Map(17 -> 0, 20 -> 7, 19 -> 14).toList,
    primaryKeys = Vector(0, 7, 14, 19)
  )

def creDocTemplateMgt: SqlSchema = SqlSchema(
  dbId = "cre_Doc_Template_Mgt",
  tableNames = Vector("Ref_Template_Types", "Templates", "Documents", "Paragraphs"),
  columnNames = Vector(
    "Template_Type_Code",
    "Template_Type_Description",
    "Template_ID",
    "Version_Number",
    "Template_Type_Code",
    "Date_Effective_From",
    "Date_Effective_To",
    "Template_Details",
    "Document_ID",
    "Template_ID",
    "Document_Name",
    "Document_Description",
    "Other_Details",
    "Paragraph_ID",
    "Document_ID",
    "Paragraph_Text",
    "Other_Details"
  ),
  columnTypes = Vector(
    Text,
    Text,
    Number,
    Number,
    Text,
    Time,
    Time,
    Text,
    Number,
    Number,
    Text,
    Text,
    Text,
    Number,
    Number,
    Text,
    Text
  ),
  columnToTable = Vector(0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3),
  tableToColumns = Map(
    "Ref_Template_Types" -> Vector(0, 1),
    "Templates"          -> Vector(2, 3, 4, 5, 6, 7),
    "Documents"          -> Vector(8, 9, 10, 11, 12),
    "Paragraphs"         -> Vector(13, 14, 15, 16)
  ),
  foreignKeys = Map(4 -> 0, 9 -> 2, 14 -> 8).toList,
  primaryKeys = Vector(0, 2, 8, 13)
)

def studentTranscriptsTracking: SqlSchema = SqlSchema(
  dbId = "student_transcripts_tracking",
  tableNames = Vector(
    "Addresses",
    "Courses",
    "Departments",
    "Degree_Programs",
    "Sections",
    "Semesters",
    "Students",
    "Student_Enrolment",
    "Student_Enrolment_Courses",
    "Transcripts",
    "Transcript_Contents"
  ),
  columnNames = Vector(
    "address_id",
    "line_1",
    "line_2",
    "line_3",
    "city",
    "zip_postcode",
    "state_province_county",
    "country",
    "other_address_details",
    "course_id",
    "course_name",
    "course_description",
    "other_details",
    "department_id",
    "department_name",
    "department_description",
    "other_details",
    "degree_program_id",
    "department_id",
    "degree_summary_name",
    "degree_summary_description",
    "other_details",
    "section_id",
    "course_id",
    "section_name",
    "section_description",
    "other_details",
    "semester_id",
    "semester_name",
    "semester_description",
    "other_details",
    "student_id",
    "current_address_id",
    "permanent_address_id",
    "first_name",
    "middle_name",
    "last_name",
    "cell_mobile_number",
    "email_address",
    "ssn",
    "date_first_registered",
    "date_left",
    "other_student_details",
    "student_enrolment_id",
    "degree_program_id",
    "semester_id",
    "student_id",
    "other_details",
    "student_course_id",
    "course_id",
    "student_enrolment_id",
    "transcript_id",
    "transcript_date",
    "other_details",
    "student_course_id",
    "transcript_id"
  ),
  columnTypes = Vector(
    Number,
    Text,
    Text,
    Text,
    Text,
    Text,
    Text,
    Text,
    Text,
    Number,
    Text,
    Text,
    Text,
    Number,
    Text,
    Text,
    Text,
    Number,
    Number,
    Text,
    Text,
    Text,
    Number,
    Number,
    Text,
    Text,
    Text,
    Number,
    Text,
    Text,
    Text,
    Number,
    Number,
    Number,
    Text,
    Text,
    Text,
    Text,
    Text,
    Text,
    Time,
    Time,
    Text,
    Number,
    Number,
    Number,
    Number,
    Text,
    Number,
    Number,
    Number,
    Number,
    Number,
    Text,
    Number,
    Number
  ),
  columnToTable = Vector(
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10
  ),
  tableToColumns = Map(
    "Addresses"                 -> Vector(0, 1, 2, 3, 4, 5, 6, 7, 8),
    "Sections"                  -> Vector(22, 23, 24, 25, 26),
    "Transcripts"               -> Vector(51, 52, 53),
    "Transcript_Contents"       -> Vector(54, 55),
    "Students"                  -> Vector(31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42),
    "Student_Enrolment_Courses" -> Vector(48, 49, 50),
    "Courses"                   -> Vector(9, 10, 11, 12),
    "Departments"               -> Vector(13, 14, 15, 16),
    "Semesters"                 -> Vector(27, 28, 29, 30),
    "Degree_Programs"           -> Vector(17, 18, 19, 20, 21),
    "Student_Enrolment"         -> Vector(43, 44, 45, 46, 47)
  ),
  foreignKeys = Map(
    46 -> 31,
    33 -> 0,
    44 -> 17,
    18 -> 13,
    50 -> 43,
    32 -> 0,
    45 -> 27,
    54 -> 48,
    49 -> 9,
    55 -> 51,
    23 -> 9
  ).toList,
  primaryKeys = Vector(0, 9, 13, 17, 22, 27, 31, 43, 48, 51)
)

def tvshow: SqlSchema = SqlSchema(
  dbId = "tvshow",
  tableNames = Vector("TV_Channel", "TV_series", "Cartoon"),
  columnNames = Vector(
    "id",
    "series_name",
    "Country",
    "Language",
    "Content",
    "Pixel_aspect_ratio_PAR",
    "Hight_definition_TV",
    "Pay_per_view_PPV",
    "Package_Option",
    "id",
    "Episode",
    "Air_Date",
    "Rating",
    "Share",
    "18_49_Rating_Share",
    "Viewers_m",
    "Weekly_Rank",
    "Channel",
    "id",
    "Title",
    "Directed_by",
    "Written_by",
    "Original_air_date",
    "Production_code",
    "Channel"
  ),
  columnTypes = Vector(
    Text,
    Text,
    Text,
    Text,
    Text,
    Text,
    Text,
    Text,
    Text,
    Number,
    Text,
    Text,
    Text,
    Number,
    Text,
    Text,
    Number,
    Text,
    Number,
    Text,
    Text,
    Text,
    Text,
    Number,
    Text
  ),
  columnToTable = Vector(0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2),
  tableToColumns = Map(
    "TV_Channel" -> Vector(0, 1, 2, 3, 4, 5, 6, 7, 8),
    "TV_series"  -> Vector(9, 10, 11, 12, 13, 14, 15, 16, 17),
    "Cartoon"    -> Vector(18, 19, 20, 21, 22, 23, 24)
  ),
  foreignKeys = Map(17 -> 0, 24 -> 0).toList,
  primaryKeys = Vector(0, 9, 18)
)

def dogKennels: SqlSchema = SqlSchema(
  dbId = "dog_kennels",
  tableNames = Vector(
    "Breeds",
    "Charges",
    "Sizes",
    "Treatment_Types",
    "Owners",
    "Dogs",
    "Professionals",
    "Treatments"
  ),
  columnNames = Vector(
    "breed_code",
    "breed_name",
    "charge_id",
    "charge_type",
    "charge_amount",
    "size_code",
    "size_description",
    "treatment_type_code",
    "treatment_type_description",
    "owner_id",
    "first_name",
    "last_name",
    "street",
    "city",
    "state",
    "zip_code",
    "email_address",
    "home_phone",
    "cell_number",
    "dog_id",
    "owner_id",
    "abandoned_yn",
    "breed_code",
    "size_code",
    "name",
    "age",
    "date_of_birth",
    "gender",
    "weight",
    "date_arrived",
    "date_adopted",
    "date_departed",
    "professional_id",
    "role_code",
    "first_name",
    "street",
    "city",
    "state",
    "zip_code",
    "last_name",
    "email_address",
    "home_phone",
    "cell_number",
    "treatment_id",
    "dog_id",
    "professional_id",
    "treatment_type_code",
    "date_of_treatment",
    "cost_of_treatment"
  ),
  columnTypes = Vector(
    Text,
    Text,
    Number,
    Text,
    Number,
    Text,
    Text,
    Text,
    Text,
    Number,
    Text,
    Text,
    Text,
    Text,
    Text,
    Text,
    Text,
    Text,
    Text,
    Number,
    Number,
    Boolean,
    Text,
    Text,
    Text,
    Number,
    Time,
    Text,
    Text,
    Time,
    Time,
    Time,
    Number,
    Text,
    Text,
    Text,
    Text,
    Text,
    Text,
    Text,
    Text,
    Text,
    Text,
    Number,
    Number,
    Number,
    Text,
    Time,
    Number
  ),
  columnToTable = Vector(
    0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6,
    6, 6, 6, 6, 7, 7, 7, 7, 7, 7
  ),
  tableToColumns = Map(
    "Treatments"      -> Vector(43, 44, 45, 46, 47, 48),
    "Charges"         -> Vector(2, 3, 4),
    "Professionals"   -> Vector(32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42),
    "Breeds"          -> Vector(0, 1),
    "Dogs"            -> Vector(19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31),
    "Sizes"           -> Vector(5, 6),
    "Owners"          -> Vector(9, 10, 11, 12, 13, 14, 15, 16, 17, 18),
    "Treatment_Types" -> Vector(7, 8)
  ),
  foreignKeys = Map(45 -> 32, 23 -> 5, 20 -> 9, 46 -> 7, 22 -> 0, 44 -> 19).toList,
  primaryKeys = Vector(0, 2, 5, 7, 9, 19, 32, 43)
)

def voter1: SqlSchema = SqlSchema(
  dbId = "voter_1",
  tableNames = Vector("AREA_CODE_STATE", "CONTESTANTS", "VOTES"),
  columnNames = Vector(
    "area_code",
    "state",
    "contestant_number",
    "contestant_name",
    "vote_id",
    "phone_number",
    "state",
    "contestant_number",
    "created"
  ),
  columnTypes = Vector(
    Number,
    Text,
    Number,
    Text,
    Number,
    Number,
    Text,
    Number,
    Time
  ),
  columnToTable = Vector(0, 0, 1, 1, 2, 2, 2, 2, 2),
  tableToColumns = Map(
    "AREA_CODE_STATE" -> Vector(0, 1),
    "CONTESTANTS"     -> Vector(2, 3),
    "VOTES"           -> Vector(4, 5, 6, 7, 8)
  ),
  foreignKeys = Map(6 -> 1, 7 -> 2).toList,
  primaryKeys = Vector(0, 2, 4)
)

def departmentManagement: SqlSchema = SqlSchema(
  dbId = "department_management",
  tableNames = Vector("department", "head", "management"),
  columnNames = Vector(
    "Department_ID",
    "Name",
    "Creation",
    "Ranking",
    "Budget_in_Billions",
    "Num_Employees",
    "head_ID",
    "name",
    "born_state",
    "age",
    "department_ID",
    "head_ID",
    "temporary_acting"
  ),
  columnTypes = Vector(
    Number,
    Text,
    Text,
    Number,
    Number,
    Number,
    Number,
    Text,
    Text,
    Number,
    Number,
    Number,
    Text
  ),
  columnToTable = Vector(0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2),
  tableToColumns = Map(
    "department" -> Vector(0, 1, 2, 3, 4, 5),
    "head"       -> Vector(6, 7, 8, 9),
    "management" -> Vector(10, 11, 12)
  ),
  foreignKeys = Map(10 -> 0, 11 -> 6).toList,
  primaryKeys = Vector(0, 6, 10, 11)
)

def productCatalog: SqlSchema = SqlSchema(
  dbId = "product_catalog",
  tableNames = Vector(
    "Attribute_Definitions",
    "Catalogs",
    "Catalog_Structure",
    "Catalog_Contents",
    "Catalog_Contents_Additional_Attributes"
  ),
  columnNames = Vector(
    "attribute_id",
    "attribute_name",
    "attribute_data_type",
    "catalog_id",
    "catalog_name",
    "catalog_publisher",
    "date_of_publication",
    "date_of_latest_revision",
    "catalog_level_number",
    "catalog_id",
    "catalog_level_name",
    "catalog_entry_id",
    "catalog_level_number",
    "parent_entry_id",
    "previous_entry_id",
    "next_entry_id",
    "catalog_entry_name",
    "product_stock_number",
    "price_in_dollars",
    "price_in_euros",
    "price_in_pounds",
    "capacity",
    "length",
    "height",
    "width",
    "catalog_entry_id",
    "catalog_level_number",
    "attribute_id",
    "attribute_value"
  ),
  columnTypes = Vector(
    Number,
    Text,
    Text,
    Number,
    Text,
    Text,
    Time,
    Time,
    Number,
    Number,
    Text,
    Number,
    Number,
    Number,
    Number,
    Number,
    Text,
    Text,
    Number,
    Number,
    Number,
    Text,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Text
  ),
  columnToTable = Vector(
    0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4
  ),
  tableToColumns = Map(
    "Attribute_Definitions"                  -> Vector(0, 1, 2),
    "Catalog_Contents"                       -> Vector(11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24),
    "Catalog_Contents_Additional_Attributes" -> Vector(25, 26, 27, 28),
    "Catalog_Structure"                      -> Vector(8, 9, 10),
    "Catalogs"                               -> Vector(3, 4, 5, 6, 7)
  ),
  foreignKeys = Map(12 -> 8, 26 -> 8, 25 -> 11, 9 -> 3).toList,
  primaryKeys = Vector(0, 3, 8, 11)
)

def machineRepair: SqlSchema = SqlSchema(
  dbId = "machine_repair",
  tableNames = Vector("repair", "machine", "technician", "repair_assignment"),
  columnNames = Vector(
    "repair_ID",
    "name",
    "Launch_Date",
    "Notes",
    "Machine_ID",
    "Making_Year",
    "Class",
    "Team",
    "Machine_series",
    "value_points",
    "quality_rank",
    "technician_id",
    "Name",
    "Team",
    "Starting_Year",
    "Age",
    "technician_id",
    "repair_ID",
    "Machine_ID"
  ),
  columnTypes = Vector(
    Number,
    Text,
    Text,
    Text,
    Number,
    Number,
    Text,
    Text,
    Text,
    Number,
    Number,
    Number,
    Text,
    Text,
    Number,
    Number,
    Number,
    Number,
    Number
  ),
  columnToTable = Vector(0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3),
  tableToColumns = Map(
    "repair"            -> Vector(0, 1, 2, 3),
    "machine"           -> Vector(4, 5, 6, 7, 8, 9, 10),
    "technician"        -> Vector(11, 12, 13, 14, 15),
    "repair_assignment" -> Vector(16, 17, 18)
  ),
  foreignKeys = Map(17 -> 0, 18 -> 4, 16 -> 11).toList,
  primaryKeys = Vector(0, 4, 11, 16, 17, 18)
)

def college1: SqlSchema = SqlSchema(
  dbId = "college_1",
  tableNames = Vector("EMPLOYEE", "DEPARTMENT", "COURSE", "CLASS", "STUDENT", "ENROLL", "PROFESSOR"),
  columnNames = Vector(
    "EMP_NUM",
    "EMP_LNAME",
    "EMP_FNAME",
    "EMP_INITIAL",
    "EMP_JOBCODE",
    "EMP_HIREDATE",
    "EMP_DOB",
    "DEPT_CODE",
    "DEPT_NAME",
    "SCHOOL_CODE",
    "EMP_NUM",
    "DEPT_ADDRESS",
    "DEPT_EXTENSION",
    "CRS_CODE",
    "DEPT_CODE",
    "CRS_DESCRIPTION",
    "CRS_CREDIT",
    "CLASS_CODE",
    "CRS_CODE",
    "CLASS_SECTION",
    "CLASS_TIME",
    "CLASS_ROOM",
    "PROF_NUM",
    "STU_NUM",
    "STU_LNAME",
    "STU_FNAME",
    "STU_INIT",
    "STU_DOB",
    "STU_HRS",
    "STU_CLASS",
    "STU_GPA",
    "STU_TRANSFER",
    "DEPT_CODE",
    "STU_PHONE",
    "PROF_NUM",
    "CLASS_CODE",
    "STU_NUM",
    "ENROLL_GRADE",
    "EMP_NUM",
    "DEPT_CODE",
    "PROF_OFFICE",
    "PROF_EXTENSION",
    "PROF_HIGH_DEGREE"
  ),
  columnTypes = Vector(
    Number,
    Text,
    Text,
    Text,
    Text,
    Time,
    Time,
    Text,
    Text,
    Text,
    Number,
    Text,
    Text,
    Text,
    Text,
    Text,
    Number,
    Text,
    Text,
    Text,
    Text,
    Text,
    Number,
    Number,
    Text,
    Text,
    Text,
    Time,
    Number,
    Text,
    Number,
    Number,
    Text,
    Text,
    Number,
    Text,
    Number,
    Text,
    Number,
    Text,
    Text,
    Text,
    Text
  ),
  columnToTable = Vector(
    0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 6,
    6, 6, 6, 6
  ),
  tableToColumns = Map(
    "EMPLOYEE"   -> Vector(0, 1, 2, 3, 4, 5, 6),
    "STUDENT"    -> Vector(23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34),
    "PROFESSOR"  -> Vector(38, 39, 40, 41, 42),
    "ENROLL"     -> Vector(35, 36, 37),
    "COURSE"     -> Vector(13, 14, 15, 16),
    "CLASS"      -> Vector(17, 18, 19, 20, 21, 22),
    "DEPARTMENT" -> Vector(7, 8, 9, 10, 11, 12)
  ),
  foreignKeys = Map(
    10 -> 0,
    14 -> 7,
    38 -> 0,
    32 -> 7,
    22 -> 0,
    39 -> 7,
    35 -> 17,
    18 -> 13,
    36 -> 23
  ).toList,
  primaryKeys = Vector(0, 7, 13, 17, 23)
)

def hr1: SqlSchema = SqlSchema(
  dbId = "hr_1",
  tableNames = Vector(
    "regions",
    "countries",
    "departments",
    "jobs",
    "employees",
    "job_history",
    "locations"
  ),
  columnNames = Vector(
    "REGION_ID",
    "REGION_NAME",
    "COUNTRY_ID",
    "COUNTRY_NAME",
    "REGION_ID",
    "DEPARTMENT_ID",
    "DEPARTMENT_NAME",
    "MANAGER_ID",
    "LOCATION_ID",
    "JOB_ID",
    "JOB_TITLE",
    "MIN_SALARY",
    "MAX_SALARY",
    "EMPLOYEE_ID",
    "FIRST_NAME",
    "LAST_NAME",
    "EMAIL",
    "PHONE_NUMBER",
    "HIRE_DATE",
    "JOB_ID",
    "SALARY",
    "COMMISSION_PCT",
    "MANAGER_ID",
    "DEPARTMENT_ID",
    "EMPLOYEE_ID",
    "START_DATE",
    "END_DATE",
    "JOB_ID",
    "DEPARTMENT_ID",
    "LOCATION_ID",
    "STREET_ADDRESS",
    "POSTAL_CODE",
    "CITY",
    "STATE_PROVINCE",
    "COUNTRY_ID"
  ),
  columnTypes = Vector(
    Number,
    Text,
    Text,
    Text,
    Number,
    Number,
    Text,
    Number,
    Number,
    Text,
    Text,
    Number,
    Number,
    Number,
    Text,
    Text,
    Text,
    Text,
    Time,
    Text,
    Number,
    Number,
    Number,
    Number,
    Number,
    Time,
    Time,
    Text,
    Number,
    Number,
    Text,
    Text,
    Text,
    Text,
    Text
  ),
  columnToTable = Vector(
    0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6
  ),
  tableToColumns = Map(
    "locations"   -> Vector(29, 30, 31, 32, 33, 34),
    "employees"   -> Vector(13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23),
    "regions"     -> Vector(0, 1),
    "countries"   -> Vector(2, 3, 4),
    "departments" -> Vector(5, 6, 7, 8),
    "job_history" -> Vector(24, 25, 26, 27, 28),
    "jobs"        -> Vector(9, 10, 11, 12)
  ),
  foreignKeys = Map(24 -> 13, 28 -> 5, 34 -> 2, 27 -> 9, 23 -> 5, 19 -> 9, 4 -> 0).toList,
  primaryKeys = Vector(0, 2, 5, 9, 13, 24, 25, 29)
)

def college3: SqlSchema = SqlSchema(
  dbId = "college_3",
  tableNames = Vector(
    "Student",
    "Faculty",
    "Department",
    "Member_of",
    "Course",
    "Minor_in",
    "Gradeconversion",
    "Enrolled_in"
  ),
  columnNames = Vector(
    "StuID",
    "LName",
    "Fname",
    "Age",
    "Sex",
    "Major",
    "Advisor",
    "city_code",
    "FacID",
    "Lname",
    "Fname",
    "Rank",
    "Sex",
    "Phone",
    "Room",
    "Building",
    "DNO",
    "Division",
    "DName",
    "Room",
    "Building",
    "DPhone",
    "FacID",
    "DNO",
    "Appt_Type",
    "CID",
    "CName",
    "Credits",
    "Instructor",
    "Days",
    "Hours",
    "DNO",
    "StuID",
    "DNO",
    "lettergrade",
    "gradepoint",
    "StuID",
    "CID",
    "Grade"
  ),
  columnTypes = Vector(
    Number,
    Text,
    Text,
    Number,
    Text,
    Number,
    Number,
    Text,
    Number,
    Text,
    Text,
    Text,
    Text,
    Number,
    Text,
    Text,
    Number,
    Text,
    Text,
    Text,
    Text,
    Number,
    Number,
    Number,
    Text,
    Text,
    Text,
    Number,
    Number,
    Text,
    Text,
    Number,
    Number,
    Number,
    Text,
    Number,
    Number,
    Text,
    Text
  ),
  columnToTable = Vector(
    0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 5, 5, 6, 6, 7, 7, 7
  ),
  tableToColumns = Map(
    "Minor_in"        -> Vector(32, 33),
    "Department"      -> Vector(16, 17, 18, 19, 20, 21),
    "Member_of"       -> Vector(22, 23, 24),
    "Faculty"         -> Vector(8, 9, 10, 11, 12, 13, 14, 15),
    "Course"          -> Vector(25, 26, 27, 28, 29, 30, 31),
    "Enrolled_in"     -> Vector(36, 37, 38),
    "Gradeconversion" -> Vector(34, 35),
    "Student"         -> Vector(0, 1, 2, 3, 4, 5, 6, 7)
  ),
  foreignKeys = Map(
    37 -> 25,
    32 -> 0,
    22 -> 8,
    31 -> 16,
    23 -> 16,
    36 -> 0,
    33 -> 16,
    28 -> 8,
    38 -> 34
  ).toList,
  primaryKeys = Vector(0, 8, 16, 25, 34)
)

def pets1: SqlSchema = SqlSchema(
  dbId = "pets_1",
  tableNames = Vector("Student", "Pets", "Has_Pet"),
  columnNames = Vector(
    "StuID",
    "LName",
    "Fname",
    "Age",
    "Sex",
    "Major",
    "Advisor",
    "city_code",
    "PetID",
    "PetType",
    "pet_age",
    "weight",
    "StuID",
    "PetID"
  ),
  columnTypes = Vector(
    Number,
    Text,
    Text,
    Number,
    Text,
    Number,
    Number,
    Text,
    Number,
    Text,
    Number,
    Number,
    Number,
    Number
  ),
  columnToTable = Vector(0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2),
  tableToColumns = Map(
    "Student" -> Vector(0, 1, 2, 3, 4, 5, 6, 7),
    "Pets"    -> Vector(8, 9, 10, 11),
    "Has_Pet" -> Vector(12, 13)
  ),
  foreignKeys = Map(12 -> 0, 13 -> 8).toList,
  primaryKeys = Vector(0, 8)
)

def flight2: SqlSchema = SqlSchema(
  dbId = "flight_2",
  tableNames = Vector("airlines", "airports", "flights"),
  columnNames = Vector(
    "uid",
    "Airline",
    "Abbreviation",
    "Country",
    "City",
    "AirportCode",
    "AirportName",
    "Country",
    "CountryAbbrev",
    "Airline",
    "FlightNo",
    "SourceAirport",
    "DestAirport"
  ),
  columnTypes = Vector(
    Number,
    Text,
    Text,
    Text,
    Text,
    Text,
    Text,
    Text,
    Text,
    Number,
    Number,
    Text,
    Text
  ),
  columnToTable = Vector(0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2),
  tableToColumns = Map(
    "airlines" -> Vector(0, 1, 2, 3),
    "airports" -> Vector(4, 5, 6, 7, 8),
    "flights"  -> Vector(9, 10, 11, 12)
  ),
  foreignKeys = Map(9 -> 0, 11 -> 5, 12 -> 5).toList,
  primaryKeys = Vector(0, 5, 9, 10)
)

def world1: SqlSchema = SqlSchema(
  dbId = "world_1",
  tableNames = Vector("country", "city", "countrylanguage"),
  columnNames = Vector(
    "Code",
    "Name",
    "Continent",
    "Region",
    "SurfaceArea",
    "IndepYear",
    "Population",
    "LifeExpectancy",
    "GNP",
    "GNPOld",
    "LocalName",
    "GovernmentForm",
    "HeadOfState",
    "Capital",
    "Code2",
    "ID",
    "Name",
    "CountryCode",
    "District",
    "Population",
    "CountryCode",
    "Language",
    "IsOfficial",
    "Percentage"
  ),
  columnTypes = Vector(
    Text,
    Text,
    Text,
    Text,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Text,
    Text,
    Text,
    Number,
    Text,
    Number,
    Text,
    Text,
    Text,
    Number,
    Text,
    Text,
    Text,
    Number
  ),
  columnToTable = Vector(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2),
  tableToColumns = Map(
    "country"         -> Vector(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14),
    "city"            -> Vector(15, 16, 17, 18, 19),
    "countrylanguage" -> Vector(20, 21, 22, 23)
  ),
  foreignKeys = Map(17 -> 0, 20 -> 0).toList,
  primaryKeys = Vector(0, 15, 20, 21)
)

def car1: SqlSchema = SqlSchema(
  dbId = "car_1",
  tableNames = Vector(
    "continents",
    "countries",
    "car_makers",
    "model_list",
    "car_names",
    "cars_data"
  ),
  columnNames = Vector(
    "ContId",
    "Continent",
    "CountryId",
    "CountryName",
    "Continent",
    "Id",
    "Maker",
    "FullName",
    "Country",
    "ModelId",
    "Maker",
    "Model",
    "MakeId",
    "Model",
    "Make",
    "Id",
    "MPG",
    "Cylinders",
    "Edispl",
    "Horsepower",
    "Weight",
    "Accelerate",
    "Year"
  ),
  columnTypes = Vector(
    Number,
    Text,
    Number,
    Text,
    Number,
    Number,
    Text,
    Text,
    Number,
    Number,
    Number,
    Text,
    Number,
    Text,
    Text,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number
  ),
  columnToTable = Vector(0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5),
  tableToColumns = Map(
    "cars_data"  -> Vector(15, 16, 17, 18, 19, 20, 21, 22),
    "model_list" -> Vector(9, 10, 11),
    "continents" -> Vector(0, 1),
    "countries"  -> Vector(2, 3, 4),
    "car_names"  -> Vector(12, 13, 14),
    "car_makers" -> Vector(5, 6, 7, 8)
  ),
  foreignKeys = Map(10 -> 5, 13 -> 11, 8 -> 2, 4 -> 0, 15 -> 12).toList,
  primaryKeys = Vector(0, 2, 5, 9, 12, 15)
)

def wta1: SqlSchema = SqlSchema(
  dbId = "wta_1",
  tableNames = Vector("players", "matches", "rankings"),
  columnNames = Vector(
    "player_id",
    "first_name",
    "last_name",
    "hand",
    "birth_date",
    "country_code",
    "best_of",
    "draw_size",
    "loser_age",
    "loser_entry",
    "loser_hand",
    "loser_ht",
    "loser_id",
    "loser_ioc",
    "loser_name",
    "loser_rank",
    "loser_rank_points",
    "loser_seed",
    "match_num",
    "minutes",
    "round",
    "score",
    "surface",
    "tourney_date",
    "tourney_id",
    "tourney_level",
    "tourney_name",
    "winner_age",
    "winner_entry",
    "winner_hand",
    "winner_ht",
    "winner_id",
    "winner_ioc",
    "winner_name",
    "winner_rank",
    "winner_rank_points",
    "winner_seed",
    "year",
    "ranking_date",
    "ranking",
    "player_id",
    "ranking_points",
    "tours"
  ),
  columnTypes = Vector(
    Number,
    Text,
    Text,
    Text,
    Time,
    Text,
    Number,
    Number,
    Number,
    Text,
    Text,
    Number,
    Number,
    Text,
    Text,
    Number,
    Number,
    Number,
    Number,
    Number,
    Text,
    Text,
    Text,
    Time,
    Text,
    Text,
    Text,
    Number,
    Text,
    Text,
    Number,
    Number,
    Text,
    Text,
    Number,
    Number,
    Number,
    Number,
    Time,
    Number,
    Number,
    Number,
    Number
  ),
  columnToTable = Vector(
    0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
    2, 2, 2, 2
  ),
  tableToColumns = Map(
    "players" -> Vector(0, 1, 2, 3, 4, 5),
    "matches" -> Vector(
      6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
      35, 36, 37
    ),
    "rankings" -> Vector(38, 39, 40, 41, 42)
  ),
  foreignKeys = Map(12 -> 0, 31 -> 0, 40 -> 0).toList,
  primaryKeys = Vector(0)
)

def battleDeath: SqlSchema = SqlSchema(
  dbId = "battle_death",
  tableNames = Vector("battle", "ship", "death"),
  columnNames = Vector(
    "id",
    "name",
    "date",
    "bulgarian_commander",
    "latin_commander",
    "result",
    "lost_in_battle",
    "id",
    "name",
    "tonnage",
    "ship_type",
    "location",
    "disposition_of_ship",
    "caused_by_ship_id",
    "id",
    "note",
    "killed",
    "injured"
  ),
  columnTypes = Vector(
    Number,
    Text,
    Text,
    Text,
    Text,
    Text,
    Number,
    Number,
    Text,
    Text,
    Text,
    Text,
    Text,
    Number,
    Number,
    Text,
    Number,
    Number
  ),
  columnToTable = Vector(0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2),
  tableToColumns = Map(
    "battle" -> Vector(0, 1, 2, 3, 4, 5),
    "ship"   -> Vector(6, 7, 8, 9, 10, 11, 12),
    "death"  -> Vector(13, 14, 15, 16, 17)
  ),
  foreignKeys = Map(6 -> 0, 13 -> 7).toList,
  primaryKeys = Vector(0, 7, 14)
)

def college1_2: SqlSchema = SqlSchema(
  dbId = "college_1",
  tableNames = Vector("EMPLOYEE", "DEPARTMENT", "COURSE", "CLASS", "STUDENT", "ENROLL", "PROFESSOR"),
  columnNames = Vector(
    "EMP_NUM",
    "EMP_LNAME",
    "EMP_FNAME",
    "EMP_INITIAL",
    "EMP_JOBCODE",
    "EMP_HIREDATE",
    "EMP_DOB",
    "DEPT_CODE",
    "DEPT_NAME",
    "SCHOOL_CODE",
    "EMP_NUM",
    "DEPT_ADDRESS",
    "DEPT_EXTENSION",
    "CRS_CODE",
    "DEPT_CODE",
    "CRS_DESCRIPTION",
    "CRS_CREDIT",
    "CLASS_CODE",
    "CRS_CODE",
    "CLASS_SECTION",
    "CLASS_TIME",
    "CLASS_ROOM",
    "PROF_NUM",
    "STU_NUM",
    "STU_LNAME",
    "STU_FNAME",
    "STU_INIT",
    "STU_DOB",
    "STU_HRS",
    "STU_CLASS",
    "STU_GPA",
    "STU_TRANSFER",
    "DEPT_CODE",
    "STU_PHONE",
    "PROF_NUM",
    "CLASS_CODE",
    "STU_NUM",
    "ENROLL_GRADE",
    "EMP_NUM",
    "DEPT_CODE",
    "PROF_OFFICE",
    "PROF_EXTENSION",
    "PROF_HIGH_DEGREE"
  ),
  columnTypes = Vector(
    Number,
    Text,
    Text,
    Text,
    Text,
    Time,
    Time,
    Text,
    Text,
    Text,
    Number,
    Text,
    Text,
    Text,
    Text,
    Text,
    Number,
    Number,
    Text,
    Text,
    Text,
    Text,
    Number,
    Number,
    Text,
    Text,
    Text,
    Time,
    Number,
    Text,
    Number,
    Number,
    Text,
    Text,
    Number,
    Text,
    Number,
    Text,
    Number,
    Text,
    Text,
    Text,
    Text
  ),
  columnToTable = Vector(
    0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 6,
    6, 6, 6, 6
  ),
  tableToColumns = Map(
    "EMPLOYEE"   -> Vector(0, 1, 2, 3, 4, 5, 6),
    "STUDENT"    -> Vector(23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34),
    "PROFESSOR"  -> Vector(38, 39, 40, 41, 42),
    "ENROLL"     -> Vector(35, 36, 37),
    "COURSE"     -> Vector(13, 14, 15, 16),
    "CLASS"      -> Vector(17, 18, 19, 20, 21, 22),
    "DEPARTMENT" -> Vector(7, 8, 9, 10, 11, 12)
  ),
  foreignKeys = Map(
    10 -> 0,
    14 -> 7,
    38 -> 0,
    32 -> 7,
    22 -> 0,
    39 -> 7,
    35 -> 17,
    18 -> 13,
    36 -> 23
  ).toList,
  primaryKeys = Vector(0, 7, 13, 17, 23)
)

def student1: SqlSchema = SqlSchema(
  dbId = "student_1",
  tableNames = Vector("list", "teachers", "classroom"),
  columnNames = Vector(
    "LastName",
    "FirstName",
    "Grade",
    "Classroom",
    "LastName",
    "FirstName",
    "Classroom",
    "Classroom_ID"
  ),
  columnTypes = Vector(Text, Text, Number, Number, Text, Text, Number, Number),
  columnToTable = Vector(0, 0, 0, 0, 1, 1, 1, 2),
  tableToColumns = Map("list" -> Vector(0, 1, 2, 3), "teachers" -> Vector(4, 5, 6), "classroom" -> Vector(7)),
  foreignKeys = Map(3 -> 7, 6 -> 7).toList,
  primaryKeys = Vector(0, 1, 4, 5, 7)
)

def smallBank1: SqlSchema = SqlSchema(
  dbId = "small_bank_1",
  tableNames = Vector("ACCOUNTS", "SAVINGS", "CHECKING"),
  columnNames = Vector("custid", "name", "custid", "balance", "custid", "balance"),
  columnTypes = Vector(Number, Text, Number, Number, Number, Number),
  columnToTable = Vector(0, 0, 1, 1, 2, 2),
  tableToColumns = Map(
    "ACCOUNTS" -> Vector(0, 1),
    "SAVINGS"  -> Vector(2, 3),
    "CHECKING" -> Vector(4, 5)
  ),
  foreignKeys = Map(2 -> 0, 4 -> 0).toList,
  primaryKeys = Vector(0, 2, 4)
)

def dorm1: SqlSchema = SqlSchema(
  dbId = "dorm_1",
  tableNames = Vector("Student", "Dorm", "Dorm_amenity", "Has_amenity", "Lives_in"),
  columnNames = Vector(
    "StuID",
    "LName",
    "Fname",
    "Age",
    "Sex",
    "Major",
    "Advisor",
    "city_code",
    "dormid",
    "dorm_name",
    "student_capacity",
    "gender",
    "amenid",
    "amenity_name",
    "dormid",
    "amenid",
    "stuid",
    "dormid",
    "room_number"
  ),
  columnTypes = Vector(
    Number,
    Text,
    Text,
    Number,
    Text,
    Number,
    Number,
    Text,
    Number,
    Text,
    Number,
    Text,
    Number,
    Text,
    Number,
    Number,
    Number,
    Number,
    Number
  ),
  columnToTable = Vector(0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4),
  tableToColumns = Map(
    "Dorm_amenity" -> Vector(12, 13),
    "Lives_in"     -> Vector(16, 17, 18),
    "Student"      -> Vector(0, 1, 2, 3, 4, 5, 6, 7),
    "Has_amenity"  -> Vector(14, 15),
    "Dorm"         -> Vector(8, 9, 10, 11)
  ),
  foreignKeys = Map(16 -> 0, 17 -> 8, 14 -> 8, 15 -> 12).toList,
  primaryKeys = Vector(0, 8, 12)
)

def baseball1: SqlSchema = SqlSchema(
  dbId = "baseball_1",
  tableNames = Vector(
    "player",
    "team",
    "all_star",
    "appearances",
    "manager_award",
    "player_award",
    "manager_award_vote",
    "player_award_vote",
    "batting",
    "batting_postseason",
    "college",
    "player_college",
    "fielding",
    "fielding_outfield",
    "fielding_postseason",
    "hall_of_fame",
    "park",
    "home_game",
    "manager",
    "manager_half",
    "pitching",
    "pitching_postseason",
    "salary",
    "postseason",
    "team_franchise",
    "team_half"
  ),
  columnNames = Vector(
    "player_id",
    "birth_year",
    "birth_month",
    "birth_day",
    "birth_country",
    "birth_state",
    "birth_city",
    "death_year",
    "death_month",
    "death_day",
    "death_country",
    "death_state",
    "death_city",
    "name_first",
    "name_last",
    "name_given",
    "weight",
    "height",
    "bats",
    "throws",
    "debut",
    "final_game",
    "retro_id",
    "bbref_id",
    "year",
    "league_id",
    "team_id",
    "franchise_id",
    "div_id",
    "rank",
    "g",
    "ghome",
    "w",
    "l",
    "div_win",
    "wc_win",
    "lg_win",
    "ws_win",
    "r",
    "ab",
    "h",
    "double",
    "triple",
    "hr",
    "bb",
    "so",
    "sb",
    "cs",
    "hbp",
    "sf",
    "ra",
    "er",
    "era",
    "cg",
    "sho",
    "sv",
    "ipouts",
    "ha",
    "hra",
    "bba",
    "soa",
    "e",
    "dp",
    "fp",
    "name",
    "park",
    "attendance",
    "bpf",
    "ppf",
    "team_id_br",
    "team_id_lahman45",
    "team_id_retro",
    "player_id",
    "year",
    "game_num",
    "game_id",
    "team_id",
    "league_id",
    "gp",
    "starting_pos",
    "year",
    "team_id",
    "league_id",
    "player_id",
    "g_all",
    "gs",
    "g_batting",
    "g_defense",
    "g_p",
    "g_c",
    "g_1b",
    "g_2b",
    "g_3b",
    "g_ss",
    "g_lf",
    "g_cf",
    "g_rf",
    "g_of",
    "g_dh",
    "g_ph",
    "g_pr",
    "player_id",
    "award_id",
    "year",
    "league_id",
    "tie",
    "notes",
    "player_id",
    "award_id",
    "year",
    "league_id",
    "tie",
    "notes",
    "award_id",
    "year",
    "league_id",
    "player_id",
    "points_won",
    "points_max",
    "votes_first",
    "award_id",
    "year",
    "league_id",
    "player_id",
    "points_won",
    "points_max",
    "votes_first",
    "player_id",
    "year",
    "stint",
    "team_id",
    "league_id",
    "g",
    "ab",
    "r",
    "h",
    "double",
    "triple",
    "hr",
    "rbi",
    "sb",
    "cs",
    "bb",
    "so",
    "ibb",
    "hbp",
    "sh",
    "sf",
    "g_idp",
    "year",
    "round",
    "player_id",
    "team_id",
    "league_id",
    "g",
    "ab",
    "r",
    "h",
    "double",
    "triple",
    "hr",
    "rbi",
    "sb",
    "cs",
    "bb",
    "so",
    "ibb",
    "hbp",
    "sh",
    "sf",
    "g_idp",
    "college_id",
    "name_full",
    "city",
    "state",
    "country",
    "player_id",
    "college_id",
    "year",
    "player_id",
    "year",
    "stint",
    "team_id",
    "league_id",
    "pos",
    "g",
    "gs",
    "inn_outs",
    "po",
    "a",
    "e",
    "dp",
    "pb",
    "wp",
    "sb",
    "cs",
    "zr",
    "player_id",
    "year",
    "stint",
    "glf",
    "gcf",
    "grf",
    "player_id",
    "year",
    "team_id",
    "league_id",
    "round",
    "pos",
    "g",
    "gs",
    "inn_outs",
    "po",
    "a",
    "e",
    "dp",
    "tp",
    "pb",
    "sb",
    "cs",
    "player_id",
    "yearid",
    "votedby",
    "ballots",
    "needed",
    "votes",
    "inducted",
    "category",
    "needed_note",
    "park_id",
    "park_name",
    "park_alias",
    "city",
    "state",
    "country",
    "year",
    "league_id",
    "team_id",
    "park_id",
    "span_first",
    "span_last",
    "games",
    "openings",
    "attendance",
    "player_id",
    "year",
    "team_id",
    "league_id",
    "inseason",
    "g",
    "w",
    "l",
    "rank",
    "plyr_mgr",
    "player_id",
    "year",
    "team_id",
    "league_id",
    "inseason",
    "half",
    "g",
    "w",
    "l",
    "rank",
    "player_id",
    "year",
    "stint",
    "team_id",
    "league_id",
    "w",
    "l",
    "g",
    "gs",
    "cg",
    "sho",
    "sv",
    "ipouts",
    "h",
    "er",
    "hr",
    "bb",
    "so",
    "baopp",
    "era",
    "ibb",
    "wp",
    "hbp",
    "bk",
    "bfp",
    "gf",
    "r",
    "sh",
    "sf",
    "g_idp",
    "player_id",
    "year",
    "round",
    "team_id",
    "league_id",
    "w",
    "l",
    "g",
    "gs",
    "cg",
    "sho",
    "sv",
    "ipouts",
    "h",
    "er",
    "hr",
    "bb",
    "so",
    "baopp",
    "era",
    "ibb",
    "wp",
    "hbp",
    "bk",
    "bfp",
    "gf",
    "r",
    "sh",
    "sf",
    "g_idp",
    "year",
    "team_id",
    "league_id",
    "player_id",
    "salary",
    "year",
    "round",
    "team_id_winner",
    "league_id_winner",
    "team_id_loser",
    "league_id_loser",
    "wins",
    "losses",
    "ties",
    "franchise_id",
    "franchise_name",
    "active",
    "na_assoc",
    "year",
    "league_id",
    "team_id",
    "half",
    "div_id",
    "div_win",
    "rank",
    "g",
    "w",
    "l"
  ),
  columnTypes = Vector(
    Text,
    Number,
    Number,
    Number,
    Text,
    Text,
    Text,
    Number,
    Number,
    Number,
    Text,
    Text,
    Text,
    Text,
    Text,
    Text,
    Number,
    Number,
    Text,
    Text,
    Text,
    Text,
    Text,
    Text,
    Number,
    Text,
    Text,
    Text,
    Text,
    Number,
    Number,
    Number,
    Number,
    Number,
    Text,
    Text,
    Text,
    Text,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Text,
    Text,
    Number,
    Number,
    Number,
    Text,
    Text,
    Text,
    Text,
    Number,
    Number,
    Text,
    Text,
    Text,
    Number,
    Number,
    Number,
    Text,
    Text,
    Text,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Text,
    Text,
    Number,
    Text,
    Text,
    Number,
    Text,
    Text,
    Number,
    Text,
    Text,
    Text,
    Text,
    Number,
    Text,
    Text,
    Number,
    Number,
    Number,
    Text,
    Number,
    Text,
    Text,
    Number,
    Number,
    Text,
    Text,
    Number,
    Number,
    Text,
    Text,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Text,
    Text,
    Text,
    Text,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Text,
    Text,
    Text,
    Text,
    Text,
    Text,
    Text,
    Number,
    Text,
    Number,
    Number,
    Text,
    Text,
    Text,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Text,
    Number,
    Number,
    Number,
    Number,
    Number,
    Text,
    Number,
    Text,
    Text,
    Text,
    Text,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Text,
    Number,
    Text,
    Number,
    Number,
    Number,
    Text,
    Text,
    Text,
    Text,
    Text,
    Text,
    Text,
    Text,
    Text,
    Number,
    Text,
    Text,
    Text,
    Text,
    Text,
    Number,
    Number,
    Number,
    Text,
    Number,
    Text,
    Text,
    Number,
    Number,
    Number,
    Number,
    Number,
    Text,
    Text,
    Number,
    Text,
    Text,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Text,
    Number,
    Number,
    Text,
    Text,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Text,
    Number,
    Text,
    Text,
    Text,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Text,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Text,
    Text,
    Text,
    Number,
    Number,
    Text,
    Text,
    Text,
    Text,
    Text,
    Number,
    Number,
    Number,
    Text,
    Text,
    Text,
    Text,
    Number,
    Text,
    Text,
    Number,
    Text,
    Text,
    Number,
    Number,
    Number,
    Number
  ),
  columnToTable = Vector(
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2,
    2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6,
    6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9,
    9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
    12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
    14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18,
    18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
    20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
    21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23,
    23, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25
  ),
  tableToColumns = Map(
    "fielding" -> Vector(
      179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196
    ),
    "player_award_vote" -> Vector(120, 121, 122, 123, 124, 125, 126),
    "fielding_outfield" -> Vector(197, 198, 199, 200, 201, 202),
    "appearances" -> Vector(
      80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100
    ),
    "pitching" -> Vector(
      264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286,
      287, 288, 289, 290, 291, 292, 293
    ),
    "team_half" -> Vector(342, 343, 344, 345, 346, 347, 348, 349, 350, 351),
    "salary"    -> Vector(324, 325, 326, 327, 328),
    "player"    -> Vector(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23),
    "team" -> Vector(
      24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
      52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71
    ),
    "player_award"       -> Vector(107, 108, 109, 110, 111, 112),
    "manager_award_vote" -> Vector(113, 114, 115, 116, 117, 118, 119),
    "manager_award"      -> Vector(101, 102, 103, 104, 105, 106),
    "postseason"         -> Vector(329, 330, 331, 332, 333, 334, 335, 336, 337),
    "all_star"           -> Vector(72, 73, 74, 75, 76, 77, 78, 79),
    "fielding_postseason" -> Vector(
      203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219
    ),
    "manager_half" -> Vector(254, 255, 256, 257, 258, 259, 260, 261, 262, 263),
    "manager"      -> Vector(244, 245, 246, 247, 248, 249, 250, 251, 252, 253),
    "batting_postseason" -> Vector(
      149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170
    ),
    "home_game"      -> Vector(235, 236, 237, 238, 239, 240, 241, 242, 243),
    "park"           -> Vector(229, 230, 231, 232, 233, 234),
    "player_college" -> Vector(176, 177, 178),
    "hall_of_fame"   -> Vector(220, 221, 222, 223, 224, 225, 226, 227, 228),
    "team_franchise" -> Vector(338, 339, 340, 341),
    "batting" -> Vector(
      127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148
    ),
    "college" -> Vector(171, 172, 173, 174, 175),
    "pitching_postseason" -> Vector(
      294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316,
      317, 318, 319, 320, 321, 322, 323
    )
  ),
  foreignKeys = Map(
    101 -> 0,
    152 -> 26,
    220 -> 0,
    197 -> 0,
    256 -> 26,
    176 -> 0,
    81  -> 26,
    123 -> 0,
    72  -> 0,
    203 -> 0,
    246 -> 26,
    151 -> 0,
    107 -> 0,
    83  -> 0,
    179 -> 0,
    238 -> 229,
    237 -> 26,
    205 -> 26,
    177 -> 171,
    127 -> 0
  ).toList,
  primaryKeys = Vector(0, 26, 171, 229)
)

def insuranceFnol: SqlSchema = SqlSchema(
  dbId = "insurance_fnol",
  tableNames = Vector(
    "Customers",
    "Services",
    "Available_Policies",
    "Customers_Policies",
    "First_Notification_of_Loss",
    "Claims",
    "Settlements"
  ),
  columnNames = Vector(
    "Customer_ID",
    "Customer_name",
    "Service_ID",
    "Service_name",
    "Policy_ID",
    "policy_type_code",
    "Customer_Phone",
    "Customer_ID",
    "Policy_ID",
    "Date_Opened",
    "Date_Closed",
    "FNOL_ID",
    "Customer_ID",
    "Policy_ID",
    "Service_ID",
    "Claim_ID",
    "FNOL_ID",
    "Effective_Date",
    "Settlement_ID",
    "Claim_ID",
    "Effective_Date",
    "Settlement_Amount"
  ),
  columnTypes = Vector(
    Number,
    Text,
    Number,
    Text,
    Number,
    Text,
    Text,
    Number,
    Number,
    Time,
    Time,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Time,
    Number,
    Number,
    Time,
    Number
  ),
  columnToTable = Vector(0, 0, 1, 1, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6),
  tableToColumns = Map(
    "First_Notification_of_Loss" -> Vector(11, 12, 13, 14),
    "Customers_Policies"         -> Vector(7, 8, 9, 10),
    "Available_Policies"         -> Vector(4, 5, 6),
    "Claims"                     -> Vector(15, 16, 17),
    "Services"                   -> Vector(2, 3),
    "Customers"                  -> Vector(0, 1),
    "Settlements"                -> Vector(18, 19, 20, 21)
  ),
  foreignKeys = List((7, 0), (8, 4), (12, 0), (14, 2), (12, 7), (13, 8), (16, 11), (19, 15)),
  primaryKeys = Vector(0, 2, 4, 7, 8, 11, 15, 18)
)

def network2: SqlSchema = SqlSchema(
  dbId = "network_2",
  tableNames = Vector("Person", "PersonFriend"),
  columnNames = Vector("name", "age", "city", "gender", "job", "name", "friend", "year"),
  columnTypes = Vector(Text, Number, Text, Text, Text, Text, Text, Number),
  columnToTable = Vector(0, 0, 0, 0, 0, 1, 1, 1),
  tableToColumns = Map("Person" -> Vector(0, 1, 2, 3, 4), "PersonFriend" -> Vector(5, 6, 7)),
  foreignKeys = List((5, 0), (6, 0)),
  primaryKeys = Vector(0)
)

def sakila1: SqlSchema = SqlSchema(
  dbId = "sakila_1",
  tableNames = Vector(
    "actor",
    "country",
    "city",
    "address",
    "category",
    "staff",
    "store",
    "customer",
    "language",
    "film",
    "film_actor",
    "film_category",
    "film_text",
    "inventory",
    "rental",
    "payment"
  ),
  columnNames = Vector(
    "actor_id",
    "first_name",
    "last_name",
    "last_update",
    "country_id",
    "country",
    "last_update",
    "city_id",
    "city",
    "country_id",
    "last_update",
    "address_id",
    "address",
    "address2",
    "district",
    "city_id",
    "postal_code",
    "phone",
    "last_update",
    "category_id",
    "name",
    "last_update",
    "staff_id",
    "first_name",
    "last_name",
    "address_id",
    "picture",
    "email",
    "store_id",
    "active",
    "username",
    "password",
    "last_update",
    "store_id",
    "manager_staff_id",
    "address_id",
    "last_update",
    "customer_id",
    "store_id",
    "first_name",
    "last_name",
    "email",
    "address_id",
    "active",
    "create_date",
    "last_update",
    "language_id",
    "name",
    "last_update",
    "film_id",
    "title",
    "description",
    "release_year",
    "language_id",
    "original_language_id",
    "rental_duration",
    "rental_rate",
    "length",
    "replacement_cost",
    "rating",
    "special_features",
    "last_update",
    "actor_id",
    "film_id",
    "last_update",
    "film_id",
    "category_id",
    "last_update",
    "film_id",
    "title",
    "description",
    "inventory_id",
    "film_id",
    "store_id",
    "last_update",
    "rental_id",
    "rental_date",
    "inventory_id",
    "customer_id",
    "return_date",
    "staff_id",
    "last_update",
    "payment_id",
    "customer_id",
    "staff_id",
    "rental_id",
    "amount",
    "payment_date",
    "last_update"
  ),
  columnTypes = Vector(
    Number,
    Text,
    Text,
    Time,
    Number,
    Text,
    Time,
    Number,
    Text,
    Number,
    Time,
    Number,
    Text,
    Text,
    Text,
    Number,
    Text,
    Text,
    Time,
    Number,
    Text,
    Time,
    Number,
    Text,
    Text,
    Number,
    Text,
    Text,
    Number,
    Boolean,
    Text,
    Text,
    Time,
    Number,
    Number,
    Number,
    Time,
    Number,
    Number,
    Text,
    Text,
    Text,
    Number,
    Boolean,
    Time,
    Time,
    Number,
    Text,
    Time,
    Number,
    Text,
    Text,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Number,
    Text,
    Text,
    Time,
    Number,
    Number,
    Time,
    Number,
    Number,
    Time,
    Number,
    Text,
    Text,
    Number,
    Number,
    Number,
    Time,
    Number,
    Time,
    Number,
    Number,
    Time,
    Number,
    Time,
    Number,
    Number,
    Number,
    Number,
    Number,
    Time,
    Time
  ),
  columnToTable = Vector(
    0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7,
    7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13,
    13, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15
  ),
  tableToColumns = Map(
    "actor"         -> Vector(0, 1, 2, 3),
    "rental"        -> Vector(75, 76, 77, 78, 79, 80, 81),
    "store"         -> Vector(33, 34, 35, 36),
    "film_text"     -> Vector(68, 69, 70),
    "payment"       -> Vector(82, 83, 84, 85, 86, 87, 88),
    "language"      -> Vector(46, 47, 48),
    "customer"      -> Vector(37, 38, 39, 40, 41, 42, 43, 44, 45),
    "film_category" -> Vector(65, 66, 67),
    "film"          -> Vector(49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61),
    "inventory"     -> Vector(71, 72, 73, 74),
    "city"          -> Vector(7, 8, 9, 10),
    "country"       -> Vector(4, 5, 6),
    "film_actor"    -> Vector(62, 63, 64),
    "address"       -> Vector(11, 12, 13, 14, 15, 16, 17, 18),
    "category"      -> Vector(19, 20, 21),
    "staff"         -> Vector(22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32)
  ),
  foreignKeys = List(
    (62, 0),
    (63, 49),
    (9, 4),
    (15, 7),
    (25, 11),
    (35, 11),
    (34, 22),
    (42, 11),
    (38, 33),
    (66, 19),
    (65, 49),
    (80, 22),
    (78, 37),
    (77, 71),
    (84, 22),
    (83, 37),
    (85, 75),
    (73, 33),
    (72, 49),
    (53, 46),
    (54, 46)
  ),
  primaryKeys = Vector(0, 4, 7, 11, 19, 22, 33, 37, 46, 49, 62, 63, 65, 66, 68, 71, 75, 82)
)

def customersAndAddresses: SqlSchema = SqlSchema(
  dbId = "customers_and_addresses",
  tableNames = Vector(
    "Addresses",
    "Products",
    "Customers",
    "Customer_Addresses",
    "Customer_Contact_Channels",
    "Customer_Orders",
    "Order_Items"
  ),
  columnNames = Vector(
    "address_id",
    "address_content",
    "city",
    "zip_postcode",
    "state_province_county",
    "country",
    "other_address_details",
    "product_id",
    "product_details",
    "customer_id",
    "payment_method",
    "customer_name",
    "date_became_customer",
    "other_customer_details",
    "customer_id",
    "address_id",
    "date_address_from",
    "address_type",
    "date_address_to",
    "customer_id",
    "channel_code",
    "active_from_date",
    "active_to_date",
    "contact_number",
    "order_id",
    "customer_id",
    "order_status",
    "order_date",
    "order_details",
    "order_id",
    "product_id",
    "order_quantity"
  ),
  columnTypes = Vector(
    Number,
    Text,
    Text,
    Text,
    Text,
    Text,
    Text,
    Number,
    Text,
    Number,
    Text,
    Text,
    Time,
    Text,
    Number,
    Number,
    Time,
    Text,
    Time,
    Number,
    Text,
    Time,
    Time,
    Text,
    Number,
    Number,
    Text,
    Time,
    Text,
    Number,
    Number,
    Number
  ),
  columnToTable = Vector(
    0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6
  ),
  tableToColumns = Map(
    "Customer_Addresses"        -> Vector(14, 15, 16, 17, 18),
    "Customer_Contact_Channels" -> Vector(19, 20, 21, 22, 23),
    "Customer_Orders"           -> Vector(24, 25, 26, 27, 28),
    "Customers"                 -> Vector(9, 10, 11, 12, 13),
    "Products"                  -> Vector(7, 8),
    "Addresses"                 -> Vector(0, 1, 2, 3, 4, 5, 6),
    "Order_Items"               -> Vector(29, 30, 31)
  ),
  foreignKeys = List((15, 0), (14, 9), (30, 7), (29, 24), (19, 9), (25, 9)),
  primaryKeys = Vector(0, 7, 9, 24)
)
