[
  {
    "id": "a5a6fef561cf350fc2c0f61225c80048d3e41977999c3e030b470ed1c19485e9",
    "qpl": "world_1 | #1 = Scan Table [ countrylanguage ] Output [ CountryCode , Percentage , Language ] ; #2 = Aggregate [ #1 ] GroupBy [ CountryCode , Language ] Output [ CountryCode, Language, MAX(percentage) AS Max_percentage ]"
  },
  {
    "id": "fdfea30a058eb1515bcf094ea6132c66bcd901c2ecc1be5f888c488c81485f8e",
    "qpl": "world_1 | #1 = Scan Table [ country ] Output [ Name , Code ] ; #2 = Scan Table [ countrylanguage ] Predicate [ Language = 'english' ] Output [ CountryCode , Language ] ; #3 = Join [ #1 , #2 ] Predicate [ #2.CountryCode = #1.Code ] Distinct [ true ] Output [ #1.Name ] ; #4 = Scan Table [ country ] Output [ Name , Code ] ; #5 = Scan Table [ countrylanguage ] Predicate [ Language = 'dutch' ] Output [ CountryCode , Language ] ; #6 = Join [ #4 , #5 ] Predicate [ #5.CountryCode = #4.Code ] Distinct [ true ] Output [ #4.Name ] ; #7 = Join [ #3 , #6 ] Predicate [ #3.Name = #6.Name ] Distinct [ true ] Output [ #3.Name ] ; #8 = Aggregate [ #7 ] Output [ countstar AS Count_Star ]"
  },
  {
    "id": "cb384f0755ee64aadab7999c2dfdc55442be5549699fa4be5be6b2bc0a111457",
    "qpl": "dog_kennels | #1 = Scan Table [ owners ] Output [ owner_id , last_name ] ; #2 = Scan Table [ dogs ] Output [ owner_id , age ] ; #3 = Filter [ #2 ] Predicate [ age IS NOT NULL ] Output [ owner_id , age ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ age DESC ] Output [ age, owner_id ] ; #5 = Join [ #1 , #4 ] Predicate [ #4.owner_id = #1.owner_id ] Output [ #1.last_name ]"
  },
  {
    "id": "b23e766b20d801d1a7c381585433382250fd7b37aeabd1fa122e67c8d8381468",
    "qpl": "world_1 | #1 = Scan Table [ country ] Output [ Name , Code ] ; #2 = Scan Table [ countrylanguage ] Predicate [ Language = 'english' ] Output [ CountryCode , Language ] ; #3 = Join [ #1 , #2 ] Predicate [ #2.CountryCode = #1.Code ] Distinct [ true ] Output [ #1.Name ] ; #4 = Scan Table [ country ] Output [ Name , Code ] ; #5 = Scan Table [ countrylanguage ] Predicate [ Language = 'dutch' ] Output [ CountryCode , Language ] ; #6 = Join [ #4 , #5 ] Predicate [ #5.CountryCode = #4.Code ] Distinct [ true ] Output [ #4.Name ] ; #7 = Join [ #3 , #6 ] Predicate [ #3.Name = #6.Name ] Distinct [ true ] Output [ #3.Name ] ; #8 = Aggregate [ #7 ] Output [ countstar AS Count_Star ]"
  },
  {
    "id": "68c96d827202512a504df23f6ab033cb7b1ac9782afc82257aeab24e8c645959",
    "qpl": "world_1 | #1 = Scan Table [ countrylanguage ] Output [ CountryCode , Percentage , Language ] ; #2 = Aggregate [ #1 ] GroupBy [ CountryCode , Language ] Output [ CountryCode, Language, MAX(percentage) AS Max_percentage ]"
  },
  {
    "id": "1d475eb098ce0ad96f35972c2d26c617cfcc6e15efde805ae7ee5dbca0616181",
    "qpl": "wta_1 | #1 = Scan Table [ matches ] Distinct [ true ] Output [ winner_rank , winner_name , winner_age ] ; #2 = Top [ #1 ] Rows [ 3 ] OrderBy [ winner_age , winner_name , winner_rank ] Output [ winner_rank , winner_name , winner_age ]"
  },
  {
    "id": "bd844dd1bbe595ee1aa0d5da9010030323680dc2b4a5b47d15a2dd2bd4796d8b",
    "qpl": "student_transcripts_tracking | #1 = Scan Table [ Transcripts ] Output [ transcript_id , transcript_date ] ; #2 = Scan Table [ Transcript_Contents ] Output [ transcript_id ] ; #3 = Aggregate [ #2 ] GroupBy [ transcript_id ] Output [ transcript_id , countstar AS Count_Star ] ; #4 = Join [ #1 , #3 ] Predicate [ #3.transcript_id = #1.transcript_id ] Output [ #3.transcript_id , #1.transcript_date , Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star ] Output [ transcript_id , transcript_date ]"
  },
  {
    "id": "587e9458cada672d2d3927d405dbd2f9bca706e71eb19a1a0e6d26d029033252",
    "qpl": "network_1 | #1 = Scan Table [ Highschooler ] Output [ ID , name ] ; #2 = Scan Table [ Likes ] Output [ student_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #2.student_id = #1.ID ] Output [ #2.student_id , #1.name ] ; #4 = Aggregate [ #3 ] GroupBy [ student_id ] Output [ name , countstar AS Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ name ]"
  },
  {
    "id": "bb647a855ae3fa4248d333184af9d583778c8243f925a40ea45b59085a0376b2",
    "qpl": "dog_kennels | #1 = Scan Table [ owners ] Output [ owner_id , last_name ] ; #2 = Scan Table [ dogs ] Output [ owner_id , age ] ; #3 = Filter [ #2 ] Predicate [ age IS NOT NULL ] Output [ owner_id , age ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ age DESC ] Output [ age, owner_id ] ; #5 = Join [ #1 , #4 ] Predicate [ #4.owner_id = #1.owner_id ] Output [ #1.last_name ]"
  },
  {
    "id": "5f825d0ca7aab228d5c0ae6793b47a6d6044a166df89612088071c3bbdf4a22e",
    "qpl": "wta_1 | #1 = Scan Table [ matches ] Distinct [ true ] Output [ winner_rank , winner_name , winner_age ] ; #2 = TopSort [ #1 ] Rows [ 3 ] OrderBy [ winner_age , winner_name , winner_rank ] Output [ winner_rank , winner_name , winner_age ]"
  },
  {
    "id": "a6c5ac5f34c3767df7ecfa7d8e8fa26d6aa081e9ae9a06b31887b21badbbe39f",
    "qpl": "student_transcripts_tracking | #1 = Scan Table [ Addresses ] Output [ address_id , country ] ; #2 = Scan Table [ Students ] Output [ cell_mobile_number , permanent_address_id , first_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #2.permanent_address_id = #1.address_id ] Output [ #2.first_name , #2.cell_mobile_number , #1.country ] ; #4 = Filter [ #3 ] Predicate [ country = 'haiti' OR cell_mobile_number = '09700166582' ] Output [ first_name ]"
  },
  {
    "id": "b4b4ae10d25e46d7369817827ed4141e9c701e7046aefa27d6f88b73baff0a32",
    "qpl": "student_transcripts_tracking | #1 = Scan Table [ Transcripts ] Output [ transcript_id , transcript_date ] ; #2 = Scan Table [ Transcript_Contents ] Output [ transcript_id ] ; #3 = Aggregate [ #2 ] GroupBy [ transcript_id ] Output [ transcript_id , countstar AS Count_Star ] ; #4 = Join [ #1 , #3 ] Predicate [ #3.transcript_id = #1.transcript_id ] Output [ #3.transcript_id , #1.transcript_date , Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star ] Output [ transcript_id , transcript_date ]"
  },
  {
    "id": "d405cd0b531fc7126168977471c87d89140774601d8b1779ff31df5e3fee25af",
    "qpl": "student_transcripts_tracking | #1 = Scan Table [ Addresses ] Output [ address_id , country ] ; #2 = Scan Table [ Students ] Output [ cell_mobile_number , permanent_address_id , first_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #2.permanent_address_id = #1.address_id ] Output [ #2.first_name , #2.cell_mobile_number , #1.country ] ; #4 = Filter [ #3 ] Predicate [ country = 'haiti' OR cell_mobile_number = '09700166582' ] Output [ first_name ]"
  },
  {
    "id": "c21404f628622b0b31a04806e09664651daff826371944fb1be63ecf5b1627a7",
    "qpl": "wta_1 | #1 = Scan Table [ players ] Output [ player_id , first_name ] ; #2 = Scan Table [ rankings ] Output [ player_id , ranking ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.player_id = #2.player_id ] Output [ #2.ranking , #1.first_name ] ; #4 = Aggregate [ #3 ] GroupBy [ first_name ] Output [ AVG(ranking) AS Avg_ranking , first_name ]"
  },
  {
    "id": "e0f60ed999370f8735907bbe27e1dc40ae9fe4e929fb31a12cc67e9f84d28816",
    "qpl": "world_1 | #1 = Scan Table [ countrylanguage ] Predicate [ Language = 'spanish' ] Output [ CountryCode , Percentage , Language ] ; #2 = Aggregate [ #1 ] GroupBy [ CountryCode ] Output [ CountryCode , MAX(Percentage) as Max_Percentage ]"
  },
  {
    "id": "5cba4e69aae92b9f05c0830dd3c8732a06eb00f0a2fa55052e50eba9644d1333",
    "qpl": "world_1 | #1 = Scan Table [ country ] Output [ Continent ] ; #2 = Filter [ #1 ] Predicate [ Continent = 'asia' ] Output [ 1 as ONE ] ; #3 = Aggregate [ #2 ] Output [ countstar AS Count_Star ]"
  },
  {
    "id": "4030ca9a53a02732ea943743b6fe00d6d8750e215cf82b9ad4d9d63fd796c938",
    "qpl": "tvshow | #1 = Scan Table [ TV_Channel ] Output [ id ] ; #2 = Aggregate [ #1 ] GroupBy [ id ] Output [ countstar as Count_Star , id ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 2 ] Output [ id ]"
  },
  {
    "id": "5ff7298e82e25f73402caec694fb894b9528e6e8552ae504972b448f45281a6b",
    "qpl": "world_1 | #1 = Scan Table [ countrylanguage ] Predicate [ Language = 'spanish' ] Output [ CountryCode , Percentage , Language ] ; #2 = Aggregate [ #1 ] GroupBy [ CountryCode ] Output [ CountryCode , MAX(Percentage) as Max_Percentage ]"
  },
  {
    "id": "34ae116d68862a3d031e45083c8c14f67053408224f2484c61530216d7152422",
    "qpl": "tvshow | #1 = Scan Table [ TV_Channel ] Output [ id ] ; #2 = Aggregate [ #1 ] GroupBy [ id ] Output [ countstar as Count_Star , id ] ; #3 = Filter [ #2 ] Predicate [ Count_Star > 2 ] Output [ id ]"
  },
  {
    "id": "52dc4eb9635d36ed792f4224850acccdee7af499d06a3a62e4d20a8fe807686a",
    "qpl": "world_1 | #1 = Scan Table [ country ] Output [ Continent ] ; #2 = Filter [ #1 ] Predicate [ Continent = 'asia' ] Output [ 1 as ONE ] ; #3 = Aggregate [ #2 ] Output [ countstar AS Count_Star ]"
  },
  {
    "id": "086087399d35549efbe7ca776ed64b5eb84b62ea11f7dc4585b96c2c26eb7d5a",
    "qpl": "wta_1 | #1 = Scan Table [ players ] Output [ player_id , first_name ] ; #2 = Scan Table [ rankings ] Output [ player_id , ranking ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.player_id = #2.player_id ] Output [ #2.ranking , #1.first_name ] ; #4 = Aggregate [ #3 ] GroupBy [ first_name ] Output [ AVG(ranking) AS Avg_ranking , first_name ]"
  },
  {
    "id": "23198886c398bd787db193781c1338ba26d87ad2e4f9b63d02819e9fd757ecbc",
    "qpl": "orchestra | #1 = Scan Table [ conductor ] Output [ Conductor_ID , Name ] ; #2 = Scan Table [ orchestra ] Output [ Conductor_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #2.Conductor_ID = #1.Conductor_ID ] Output [ #1.Name , #1.Conductor_ID ] ; #4 = Aggregate [ #3 ] GroupBy [ Name, Conductor_ID ] Output [ Name , countstar AS Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Name ]"
  },
  {
    "id": "029a30407cbfd44db13238d8122ed6af9d93a9a0eb4dfa9fafbdd7c07c9e6d91",
    "qpl": "orchestra | #1 = Scan Table [ conductor ] Output [ Conductor_ID , Name ] ; #2 = Scan Table [ orchestra ] Output [ Conductor_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #2.Conductor_ID = #1.Conductor_ID ] Output [ #1.Name , #1.Conductor_ID ] ; #4 = Aggregate [ #3 ] GroupBy [ Name, Conductor_ID ] Output [ Name , countstar AS Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Name ]"
  },
  {
    "id": "3b3a4ebe0ad418bead19cc531246d103d023da54e666715365d14d3219b84639",
    "qpl": "orchestra | #1 = Scan Table [ conductor ] Output [ Conductor_ID , Name ] ; #2 = Scan Table [ orchestra ] Output [ Conductor_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #2.Conductor_ID = #1.Conductor_ID ] Output [ #1.Name , #1.Conductor_ID ] ; #4 = Aggregate [ #3 ] GroupBy [ Name, Conductor_ID ] Output [ Name , countstar AS Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Name ]"
  },
  {
    "id": "bd62d7dedb5bfdf4408dfe5cc9e377d5b62d7a60f33ed0609c915537c6964341",
    "qpl": "orchestra | #1 = Scan Table [ conductor ] Output [ Conductor_ID , Name ] ; #2 = Scan Table [ orchestra ] Output [ Conductor_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #2.Conductor_ID = #1.Conductor_ID ] Output [ #1.Name , #1.Conductor_ID ] ; #4 = Aggregate [ #3 ] GroupBy [ Name, Conductor_ID ] Output [ Name , countstar AS Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Name ]"
  },
  {
    "id": "78180afbb85c0ff5153d14edb5060ddbd3cc213bd221da87adef21a8d4c73e41",
    "qpl": "wta_1 | #1 = Scan Table [ players ] Output [ player_id , first_name ] ; #2 = Scan Table [ rankings ] Output [ player_id , ranking_points ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.player_id = #2.player_id ] Output [ #2.ranking_points , #1.first_name ] ; #4 = Aggregate [ #3 ] GroupBy [ first_name ] Output [ SUM(ranking_points) AS Sum_ranking_points , first_name ]"
  },
  {
    "id": "fc6edbd3e37d50acc7d2b3f1a3c6d66eccec37a36afcf02f8f6a14bfc7f951bc",
    "qpl": "wta_1 | #1 = Scan Table [ players ] Output [ player_id , first_name ] ; #2 = Scan Table [ rankings ] Output [ player_id , ranking_points ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.player_id = #2.player_id ] Output [ #2.ranking_points , #1.first_name ] ; #4 = Aggregate [ #3 ] GroupBy [ first_name ] Output [ SUM(ranking_points) AS Sum_ranking_points , first_name ]"
  },
  {
    "id": "481adaa806fc03fa0926f62a1fe0fe0d32e3d298f98873d4b71f0ff3030c88c8",
    "qpl": "orchestra | #1 = Scan Table [ orchestra ] Output [ Year_of_Founded , Orchestra_ID ] ; #2 = Scan Table [ performance ] Output [ Orchestra_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #2.Orchestra_ID = #1.Orchestra_ID ] Output [ #1.Orchestra_ID , #1.Year_of_Founded ] ; #4 = Aggregate [ #3 ] GroupBy [ Year_of_Founded, Orchestra_ID ] Output [ Year_of_Founded , countstar AS Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Year_of_Founded ]"
  },
  {
    "id": "59326357caa3607e771939182ff7aba6e9ba310af53c484ee2df9ae783da60ac",
    "qpl": "orchestra | #1 = Scan Table [ orchestra ] Output [ Year_of_Founded , Orchestra_ID ] ; #2 = Scan Table [ performance ] Output [ Orchestra_ID ] ; #3 = Join [ #1 , #2 ] Predicate [ #2.Orchestra_ID = #1.Orchestra_ID ] Output [ #1.Orchestra_ID , #1.Year_of_Founded ] ; #4 = Aggregate [ #3 ] GroupBy [ Year_of_Founded, Orchestra_ID ] Output [ Year_of_Founded , countstar AS Count_Star ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 1 ] Output [ Year_of_Founded ]"
  },
  {
    "id": "53f3c08f00b4abb2d3c3d200358f04020590cdb4126609068d72fb4b5cedda7e",
    "qpl": "voter_1 | #1 = Scan Table [ votes ] Output [ state ] ; #2 = Filter [ #1 ] Predicate [ state = 'ca' OR state = 'ny' ] Output [ 1 AS One ] ; #3 = Aggregate [ #2 ] Output [ countstar AS Count_Star ]"
  },
  {
    "id": "63bfffa86de5ddf9518ff92a308340dbf0884a3e273892bfb044d3f7c7fbe2a3",
    "qpl": "flight_2 | #1 = Scan Table [ airports ] Output [ AirportCode , AirportName ] ; #2 = Scan Table [ flights ] Output [ SourceAirport AS AirportName ] ; #3 = Scan Table [ flights ] Output [ DestAirport AS AirportName ] ; #4 = Union [ #2 , #3 ] Output [ #2.AirportName ] ; #5 = Except [ #1 , #4 ] ExceptColumns [ #1.AirportName ] Output [ #1.AirportName ]"
  },
  {
    "id": "9a73a6338b34f5e65b5cc27586bccdf5fe018eeda56c944a0b2b0b9f7e6ca09c",
    "qpl": "flight_2 | #1 = Scan Table [ airports ] Output [ AirportCode , AirportName ] ; #2 = Scan Table [ flights ] Output [ SourceAirport AS AirportName ] ; #3 = Scan Table [ flights ] Output [ DestAirport AS AirportName ] ; #4 = Union [ #2 , #3 ] Output [ #2.AirportName ] ; #5 = Except [ #1 , #4 ] ExceptColumns [ #1.AirportName ] Output [ #1.AirportName ]"
  },
  {
    "id": "92f7870d8e544dec954c41ef4da65daa4fb2cba5f0706f1d73c2442f423a6dd8",
    "qpl": "network_1 | #1 = Scan Table [ Highschooler ] Output [ ID , name ] ; #2 = Scan Table [ Likes ] Output [ student_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #2.student_id = #1.ID ] Output [ #2.student_id , #1.name ] ; #4 = Aggregate [ #3 ] GroupBy [ student_id ] Output [ countstar AS Count_Star , name ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] WithTies [ true ] Output [ name ]"
  },
  {
    "id": "bd844dd1bbe595ee1aa0d5da9010030323680dc2b4a5b47d15a2dd2bd4796d8b",
    "qpl": "student_transcripts_tracking | #1 = Scan Table [ Transcripts ] Output [ transcript_id , transcript_date ] ; #2 = Scan Table [ Transcript_Contents ] Output [ transcript_id ] ; #3 = Aggregate [ #2 ] GroupBy [ transcript_id ] Output [ countstar AS Count_Star , transcript_id ] ; #4 = Join [ #1 , #3 ] Predicate [ #3.transcript_id = #1.transcript_id ] Output [ #1.transcript_date , Count_Star , #3.transcript_id ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] WithTies [ true ] Output [ transcript_id , transcript_date ]"
  },
  {
    "id": "587e9458cada672d2d3927d405dbd2f9bca706e71eb19a1a0e6d26d029033252",
    "qpl": "network_1 | #1 = Scan Table [ Highschooler ] Output [ ID , name ] ; #2 = Scan Table [ Likes ] Output [ student_id ] ; #3 = Join [ #1 , #2 ] Predicate [ #2.student_id = #1.ID ] Output [ #2.student_id , #1.name ] ; #4 = Aggregate [ #3 ] GroupBy [ student_id ] Output [ countstar AS Count_Star , name ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] WithTies [ true ] Output [ name ]"
  },
  {
    "id": "bb647a855ae3fa4248d333184af9d583778c8243f925a40ea45b59085a0376b2",
    "qpl": "dog_kennels | #1 = Scan Table [ Owners ] Output [ owner_id , last_name ] ; #2 = Scan Table [ Dogs ] Output [ owner_id , age ] ; #3 = Filter [ #2 ] Predicate [ age IS NOT NULL ] Output [ owner_id , age ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ age DESC ] WithTies [ true ] Output [ owner_id ] ; #5 = Join [ #1 , #4 ] Predicate [ #4.owner_id = #1.owner_id ] Output [ #1.last_name ]"
  },
  {
    "id": "b4b4ae10d25e46d7369817827ed4141e9c701e7046aefa27d6f88b73baff0a32",
    "qpl": "student_transcripts_tracking | #1 = Scan Table [ Transcripts ] Output [ transcript_id , transcript_date ] ; #2 = Scan Table [ Transcript_Contents ] Output [ transcript_id ] ; #3 = Aggregate [ #2 ] GroupBy [ transcript_id ] Output [ countstar AS Count_Star , transcript_id ] ; #4 = Join [ #1 , #3 ] Predicate [ #3.transcript_id = #1.transcript_id ] Output [ #1.transcript_date , Count_Star , #3.transcript_id ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] WithTies [ true ] Output [ transcript_id , transcript_date ]"
  },
  {
    "id": "bff2974c43a128f711181e493e2036cb2b26cb7aa8f12d9009b047620bef2c21",
    "qpl": "voter_1 | #1 = Scan Table [ votes ] Output [ contestant_number ] ; #2 = Scan Table [ contestants ] Output [ contestant_number , contestant_name ] ; #3 = Join [ #1 , #2 ] Predicate [ #2.contestant_number = #1.contestant_number ] Output [ #2.contestant_name , #2.contestant_number ] ; #4 = Aggregate [ #3 ] GroupBy [ contestant_name , contestant_number ] Output [ countstar AS Count_Star , contestant_number , contestant_name ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star ASC ] WithTies [ true ] Output [ contestant_number , contestant_name ]"
  },
  {
    "id": "1b4ff28beddb2e20b5b98772dc08dc31b033b25d3bb666da28b6bfc81b517174",
    "qpl": "concert_singer | #1 = Scan Table [ concert ] Predicate [ Year >= 2014 ] Output [ Year , Stadium_ID ] ; #2 = Scan Table [ stadium ] Output [ Capacity , Stadium_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Stadium_ID = #2.Stadium_ID ] Output [ #2.Stadium_ID , #2.Capacity , #2.Name ] ; #4 = Aggregate [ #3 ] GroupBy [ Stadium_ID ] Output [ Capacity , Name , countstar AS Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Capacity , Name ]"
  },
  {
    "id": "6b4498103b5d61a19827ce25667aea3019ce7675511bd6745692252c786e1437",
    "qpl": "concert_singer | #1 = Scan Table [ concert ] Predicate [ Year > 2013 ] Output [ Year , Stadium_ID ] ; #2 = Scan Table [ stadium ] Output [ Capacity , Stadium_ID , Name ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.Stadium_ID = #2.Stadium_ID ] Output [ #2.Stadium_ID , #2.Capacity , #2.Name ] ; #4 = Aggregate [ #3 ] GroupBy [ Stadium_ID ] Output [ Capacity , Name , countstar AS Count_Star ] ; #5 = TopSort [ #4 ] Rows [ 1 ] OrderBy [ Count_Star DESC ] Output [ Count_Star , Capacity , Name ]"
  },
  {
    "id": "c08c23e7cc708242ee88a3d2b2b77fcc6eba87f51093769a204df2c410d443ae",
    "qpl": "battle_death | #1 = Scan Table [ ship ] Output [ lost_in_battle , id ] ; #2 = Scan Table [ battle ] Output [ name , id ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.lost_in_battle = #2.id ] Output [ #2.id , #2.name ] ; #4 = Scan Table [ death ] Output [ caused_by_ship_id , killed ] ; #5 = Join [ #3 , #4 ] Predicate [ #3.id = #4.caused_by_ship_id ] Output [ #3.id , #3.name , #4.killed ] ; #6 = Aggregate [ #5 ] GroupBy [ id ] Output [ SUM(killed) AS Sum_killed , name , id ] ; #7 = Filter [ #6 ] Predicate [ Sum_killed > 10 ] Output [ name , id ]"
  },
  {
    "id": "5f6c5c97e4535a57a648be9149e33db7045c08bc96516c2e753c41f04e1e2583",
    "qpl": "world_1 | #1 = Scan Table [ country ] Output [ Code2 , Region , IndepYear , HeadOfState , Name , GNPOld , Continent , GNP , Capital , LifeExpectancy , LocalName , SurfaceArea , Code , Population , GovernmentForm ] ; #2 = Scan Table [ countrylanguage ] Predicate [ Language = 'English' ] Output [ IsOfficial , CountryCode , Language , Percentage ] ; #3 = Filter [ #2 ] Predicate [ IsOfficial = 'T' ] Output [ IsOfficial , CountryCode , Language , Percentage ] ; #4 = Join [ #1 , #3 ] Predicate [ #3.CountryCode = #1.Code ] Output [ #3.IsOfficial , #1.LifeExpectancy , #3.Percentage , #1.Code , #1.IndepYear , #1.Region , #1.Capital , #1.LocalName , #1.Name , #1.Continent , #1.Population , #1.HeadOfState , #1.GovernmentForm , #1.GNP , #1.Code2 , #1.SurfaceArea , #1.GNPOld , #3.Language , #3.CountryCode ] ; #5 = Scan Table [ country ] Output [ Code2 , Region , IndepYear , HeadOfState , Name , GNPOld , Continent , GNP , Capital , LifeExpectancy , LocalName , SurfaceArea , Code , Population , GovernmentForm ] ; #6 = Scan Table [ countrylanguage ] Predicate [ Language = 'Dutch' ] Output [ IsOfficial , CountryCode , Language , Percentage ] ; #7 = Filter [ #6 ] Predicate [ IsOfficial = 'T' ] Output [ IsOfficial , CountryCode , Language , Percentage ] ; #8 = Join [ #5 , #7 ] Predicate [ #7.CountryCode = #5.Code ] Output [ #5.Population , #5.Code2 , #7.IsOfficial , #5.Name , #5.LifeExpectancy , #5.Code , #7.Percentage , #5.Continent , #5.GNP , #7.Language , #5.GNPOld , #5.SurfaceArea , #5.IndepYear , #5.Region , #5.HeadOfState , #5.GovernmentForm , #7.CountryCode , #5.LocalName , #5.Capital ] ; #9 = Union [ #4 , #8 ] Output [ #4.CountryCode , #4.IsOfficial , #4.Code2 , #4.Percentage , #4.Language , #4.LifeExpectancy , #4.GNP , #4.Region , #4.GNPOld , #4.Name , #4.IndepYear , #4.SurfaceArea , #4.Capital , #4.HeadOfState , #4.Population , #4.GovernmentForm , #4.Code , #4.Continent , #4.LocalName ]"
  },
  {
    "id": "ad21629f0a4e48341926c3e116c4f3ae3e68f41715b9f118146b1b81010b5be1",
    "qpl": "car_1 | #1 = Scan Table [ cars_data ] Output [ Year ] ; #2 = Aggregate [ #1 ] Output [ MIN(Year) as Min_Year ] ; #3 = Scan Table [ cars_data ] Output [ Id , Year ] ; #4 = Join [ #2, #3 ] Predicate [ #3.Year = #2.Min_Year ] Output [ #3.Id , #3.Year ] ; #5 = Scan Table [ car_names ] Output [ Make , MakeId ] ; #6 = Join [ #4 , #5 ] Predicate [ #5.MakeId = #4.Id ] Output [ #4.Year , #5.Make ]"
  },
  {
    "id": "71b8e3eee7e7618b7730a3dc215c5d838411a0a424df17b4823a8f1ed6b56062",
    "qpl": "car_1 | #1 = Scan Table [ cars_data ] Output [ Year ] ; #2 = Aggregate [ #1 ] Output [ MIN(Year) as Min_Year ] ; #3 = Scan Table [ cars_data ] Output [ Id , Year ] ; #4 = Join [ #2, #3 ] Predicate [ #3.Year = #2.Min_Year ] Output [ #3.Id , #3.Year ] ; #5 = Scan Table [ car_names ] Output [ Make , MakeId ] ; #6 = Join [ #4 , #5 ] Predicate [ #5.MakeId = #4.Id ] Output [ #4.Year , #5.Make ]"
  },
  {
    "id": "7e07965719bdc4b883c84663dcc9b66ffdf2d7e962e4fcf8cebbdc95bad61b70",
    "qpl": "car_1 | #1 = Scan Table [ car_makers ] Output [ FullName , Id ] ; #2 = Scan Table [ model_list ] Output [ Model , Maker ] ; #3 = Scan Table [ car_names ] Output [ Model , MakeId ] ; #4 = Scan Table [ cars_data ] Output [ Weight , Id ] ; #5 = Join [ #3 , #4 ] Predicate [ #4.Id = #3.MakeId ] Output [ #3.Model , #4.Weight ] ; #6 = Join [ #2 , #5 ] Predicate [ #5.Model = #2.Model ] Output [ #2.Model , #2.Maker , #5.Weight ] ; #7 = Join [ #1 , #6 ] Predicate [ #6.Maker = #1.Id ] Output [ #6.Model , #6.Weight , #1.FullName ] ; #8 = Filter [ #7 ] Predicate [ Weight > 3500 Or FullName = 'General Motors' ] Distinct [ true ] Output [ Model ]"
  },
  {
    "id": "869d090908c20d389878b3c1a8c760b86d77771817c2396a1fe57ce4f1537348",
    "qpl": "car_1 | #1 = Scan Table [ car_makers ] Output [ FullName , Id ] ; #2 = Scan Table [ model_list ] Output [ Model , Maker ] ; #3 = Scan Table [ car_names ] Output [ Model , MakeId ] ; #4 = Scan Table [ cars_data ] Output [ Weight , Id ] ; #5 = Join [ #3 , #4 ] Predicate [ #4.Id = #3.MakeId ] Output [ #3.Model , #4.Weight ] ; #6 = Join [ #2 , #5 ] Predicate [ #5.Model = #2.Model ] Output [ #2.Model , #2.Maker , #5.Weight ] ; #7 = Join [ #1 , #6 ] Predicate [ #6.Maker = #1.Id ] Output [ #6.Model , #6.Weight , #1.FullName ] ; #8 = Filter [ #7 ] Predicate [ Weight > 3500 Or FullName = 'General Motors' ] Distinct [ true ] Output [ Model ]"
  },
  {
    "id": "a9ff32fcd6bd92e2683cd5b35a991b73751f44afc13e6146cc8b4a68a61dcc1c",
    "qpl": "flight_2 | #1 = Scan Table [ airlines ] Output [ uid , Airline ] ; #2 = Scan Table [ flights ] Output [ Airline ] ; #3 = Join [ #1 , #2 ] Predicate [ #2.Airline = #1.uid ] Output [ #1.Airline ] ; #4 = Aggregate [ #3 ] GroupBy [ Airline ] Output [ countstar AS Count_Star , Airline ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 10 ] Output [ Airline ]"
  },
  {
    "id": "67367330d8de673f906ebfa5f90854abadcd59ec692acaadafbf1c0b0fcbd88b",
    "qpl": "flight_2 | #1 = Scan Table [ airlines ] Output [ uid , Airline ] ; #2 = Scan Table [ flights ] Output [ Airline ] ; #3 = Join [ #1 , #2 ] Predicate [ #2.Airline = #1.uid ] Output [ #1.Airline ] ; #4 = Aggregate [ #3 ] GroupBy [ Airline ] Output [ countstar AS Count_Star , Airline ] ; #5 = Filter [ #4 ] Predicate [ Count_Star > 10 ] Output [ Airline ]"
  },
  {
    "id": "5f6c5c97e4535a57a648be9149e33db7045c08bc96516c2e753c41f04e1e2583",
    "qpl": "world_1 | #1 = Scan Table [ country ] Output [ Code2 , Region , IndepYear , HeadOfState , Name , GNPOld , Continent , GNP , Capital , LifeExpectancy , LocalName , SurfaceArea , Code , Population , GovernmentForm ] ; #2 = Scan Table [ countrylanguage ] Predicate [ Language = 'English' ] Output [ IsOfficial , CountryCode , Language , Percentage ] ; #3 = Filter [ #2 ] Predicate [ IsOfficial = 'T' ] Output [ IsOfficial , CountryCode , Language , Percentage ] ; #4 = Join [ #1 , #3 ] Predicate [ #3.CountryCode = #1.Code ] Output [ #3.IsOfficial , #1.LifeExpectancy , #3.Percentage , #1.Code , #1.IndepYear , #1.Region , #1.Capital , #1.LocalName , #1.Name , #1.Continent , #1.Population , #1.HeadOfState , #1.GovernmentForm , #1.GNP , #1.Code2 , #1.SurfaceArea , #1.GNPOld , #3.Language , #3.CountryCode ] ; #5 = Scan Table [ country ] Output [ Code2 , Region , IndepYear , HeadOfState , Name , GNPOld , Continent , GNP , Capital , LifeExpectancy , LocalName , SurfaceArea , Code , Population , GovernmentForm ] ; #6 = Scan Table [ countrylanguage ] Predicate [ Language = 'Dutch' ] Output [ IsOfficial , CountryCode , Language , Percentage ] ; #7 = Filter [ #6 ] Predicate [ IsOfficial = 'T' ] Output [ IsOfficial , CountryCode , Language , Percentage ] ; #8 = Join [ #5 , #7 ] Predicate [ #7.CountryCode = #5.Code ] Output [ #5.Population , #5.Code2 , #7.IsOfficial , #5.Name , #5.LifeExpectancy , #5.Code , #7.Percentage , #5.Continent , #5.GNP , #7.Language , #5.GNPOld , #5.SurfaceArea , #5.IndepYear , #5.Region , #5.HeadOfState , #5.GovernmentForm , #7.CountryCode , #5.LocalName , #5.Capital ] ; #9 = Union [ #4 , #8 ] Output [ #4.CountryCode , #4.IsOfficial , #4.Code2 , #4.Percentage , #4.Language , #4.LifeExpectancy , #4.GNP , #4.Region , #4.GNPOld , #4.Name , #4.IndepYear , #4.SurfaceArea , #4.Capital , #4.HeadOfState , #4.Population , #4.GovernmentForm , #4.Code , #4.Continent , #4.LocalName ]"
  },
  {
    "id": "cb384f0755ee64aadab7999c2dfdc55442be5549699fa4be5be6b2bc0a111457",
    "qpl": "dog_kennels | #1 = Scan Table [ owners ] Output [ owner_id , last_name ] ; #2 = Scan Table [ dogs ] Output [ owner_id , age ] ; #3 = Filter [ #2 ] Predicate [ age IS NOT NULL ] Output [ owner_id , age ] ; #4 = TopSort [ #3 ] Rows [ 1 ] OrderBy [ age DESC ] WithTies [ True ] Output [ age, owner_id ] ; #5 = Join [ #1 , #4 ] Predicate [ #4.owner_id = #1.owner_id ] Output [ #1.last_name ]"
  },
  {
    "id": "1f310f5bbbc32f27959b1948e0a2b55cc6d6ab439f95fa18d2a151873b24edf2",
    "qpl": "flight_2 | #1 = Scan Table [ airlines ] Predicate [ Airline = 'JetBlue Airways' ] Output [ uid ] ; #2 = Scan Table [ flights ] Output [ Airline ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.uid = #2.Airline ] Output [ #1.uid ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
  },
  {
    "id": "b3a92bd00df018276c532ac506f498a4aab18fc78bd5e5c233593b3d0919d6e3",
    "qpl": "flight_2 | #1 = Scan Table [ airlines ] Predicate [ Airline = 'JetBlue Airways' ] Output [ uid ] ; #2 = Scan Table [ flights ] Output [ Airline ] ; #3 = Join [ #1 , #2 ] Predicate [ #1.uid = #2.Airline ] Output [ #1.uid ] ; #4 = Aggregate [ #3 ] Output [ countstar AS Count_Star ]"
  }
]
